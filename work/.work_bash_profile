export PROJECT_HOME="/Users/jack.qian/robinhood"
export PATH="$PATH:$HOME/robinhood/phabricator/arcanist/bin/"
# BEGIN ANSIBLE MANAGED BLOCK
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi
if which pyenv-virtualenv-init > /dev/null; then
  eval "$(pyenv virtualenv-init -)"
fi
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
export WORKON_HOME="$HOME/.virtualenvs"
pyenv virtualenvwrapper_lazy
export CPPFLAGS=-I/usr/local/opt/openssl/include
export LDFLAGS=-L/usr/local/opt/openssl/lib
# END ANSIBLE MANAGED BLOCK

export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
  
# Command line gitk-like viewer
alias gitk-text='git log --graph --pretty="tformat:%C(yellow)%h%Creset %Cgreen(%ar)%Creset %C(bold blue)<%an>%Creset %C(red)%d%Creset %s"'
 
# Automatically activate Git projects' virtual environments based on the
# directory name of the project. Virtual environment name can be overridden
# by placing a .venv file in the project root with a virtualenv name in it
# http://hmarr.com/2010/jan/19/making-virtualenv-play-nice-with-git/
function workon_cwd {
    # Check that this is a Git repo
    GIT_DIR=`git rev-parse --git-dir 2> /dev/null`
    if [ $? == 0 ]; then
        # Find the repo root and check for virtualenv name override
        GIT_DIR=`\cd $GIT_DIR; pwd`
        PROJECT_ROOT=`dirname "$GIT_DIR"`
        ENV_NAME=`basename "$PROJECT_ROOT"`
        if [ -f "$PROJECT_ROOT/.venv" ]; then
            ENV_NAME=`cat "$PROJECT_ROOT/.venv"`
        fi
        # Activate the environment only if it is not already active
        if [ "$VIRTUAL_ENV" != "$WORKON_HOME/$ENV_NAME" ]; then
            if [ -e "$WORKON_HOME/$ENV_NAME/bin/activate" ]; then
                workon "$ENV_NAME" && export CD_VIRTUAL_ENV="$ENV_NAME"
            fi
        fi
    elif [ $CD_VIRTUAL_ENV ]; then
        # We've just left the repo, deactivate the environment
        # Note: this only happens if the virtualenv was activated automatically
        deactivate && unset CD_VIRTUAL_ENV
    fi
}
# New cd function that does the virtualenv magic
function venv_cd {
    cd "$@" && workon_cwd
}
alias cd="venv_cd"
 
# Delete all the old .pyc files that could be causing you errors
alias clean_pyc="find . -name '*.pyc' -delete"
  
# Add arcanist to path (Change 'arc' to where you installed arcanist)
export PATH="$PATH:~/arc/arcanist/bin"
# Always add coverage if running arc diff
alias ad="arc diff --coverage"

alias ut="DJANGO_SETTINGS_MODULE=settings.local.server REUSE_DB=true ./manage.py test --nologcapture --nocapture"
alias mut="DJANGO_SETTINGS_MODULE=settings.local.server REUSE_DB=false ./manage.py test --nologcapture --noinput --nocapture"

function covut() {
    # Usage: covut tests_package [cover_modules]
    # covut apps.foo.tests
    # covut apps.foo.tests apps.foo
    DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-settings.local.server} \
      REUSE_DB=true \
      ./manage.py test \
        --nologcapture \
        --with-coverage \
        --cover-inclusive \
        --cover-tests \
        --cover-min-percentage=100 \
        --doctest-tests \
        --nocapture \
        --failfast \
        --parallel=2 \
        --cover-package="${2:-${1%.*}}" \
        --cover-erase \
        --cover-branches \
        "$@"
    coverage html -d cover
    rm -f .coverage
}

source /usr/local/bin/virtualenvwrapper.sh

source ~/.bashrc
